services:
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - rag-service
      - sudar-agent
    networks:
      - sudar-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: postgres-server
    environment:
      - POSTGRES_DB=sudar_db
      - POSTGRES_USER=sudar_user
      - POSTGRES_PASSWORD=sudar_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./be/sql:/docker-entrypoint-initdb.d
    networks:
      - sudar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sudar_user -d sudar_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./be
    container_name: sudar-backend
    environment:
      - PORT=3006
      - DATABASE_URL=postgresql://sudar_user:sudar_password@postgres:5432/sudar_db
      - SECRET_KEY=${SECRET_KEY}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN:-}
      - COOKIE_SECURE=${COOKIE_SECURE:-true}
      - COOKIE_SAMESITE=${COOKIE_SAMESITE:-strict}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME}
    expose:
      - "3006"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sudar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:3006/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongodb-server:
    image: mongo:latest
    container_name: mongodb-server
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - sudar-network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio-server
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server --console-address ":9001" /data
    networks:
      - sudar-network
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-server
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - sudar-network
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sudar-network
    restart: unless-stopped

  broker:
    image: apache/kafka:latest
    container_name: broker
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    restart: unless-stopped
    networks:
      - sudar-network

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama:/root/.ollama  
      - ./ollama_entrypoint.sh:/ollama_entrypoint.sh 
    ports:
      - "11434:11434"
    entrypoint: ["/bin/bash", "/ollama_entrypoint.sh"] 
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sudar-network
    restart: unless-stopped

  md-to-pdf:
    build: 
      context: ./services/md-to-pdf
    container_name: md-to-pdf-service
    environment:
      - PORT=3000
    ports:
      - "3000:3000"
    networks:
      - sudar-network
    restart: unless-stopped

  manim-renderer:
    build:
      context: ./services/manim-renderer
    container_name: manim-renderer-service
    environment:
      - PORT=3004
      - REDIS_URL=redis://redis:6379/0
      - JOB_STATUS_TTL_SECONDS=3600
    ports:
      - "3004:3004"
    volumes:
      - manim-temp:/app/temp
      - manim-output:/app/output
    depends_on:
      - redis
    networks:
      - sudar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  rag-service:
    build:
      context: ./services/rag-service
    container_name: rag-service
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://sudar_user:sudar_password@postgres:5432/sudar_db
      - OLLAMA_BASE_URL=http://ollama:11434
      - EMBEDDING_MODEL_NAME=embeddinggemma:300m
      - EMBEDDING_DIMENSION=768
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_NAME=rag_documents
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=rag-documents
      - KAFKA_BOOTSTRAP_SERVERS=broker:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - HOST=0.0.0.0
      - PORT=3001
      - DOCLING_ARTIFACTS_PATH=/docling_models
    expose:
      - "3001"
    volumes:
      - docling-models:/docling_models
    depends_on:
      postgres:
        condition: service_started
      ollama:
        condition: service_started
      qdrant:
        condition: service_started
      minio:
        condition: service_started
      broker:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - sudar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  rag-worker:
    image: sudar-rag-service:latest
    container_name: rag-worker
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - EMBEDDING_MODEL_NAME=embeddinggemma:300m
      - EMBEDDING_DIMENSION=768
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_NAME=rag_documents
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=rag-documents
      - KAFKA_BOOTSTRAP_SERVERS=broker:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DOCLING_ARTIFACTS_PATH=/docling_models
    volumes:
      - docling-models:/docling_models
    depends_on:
      ollama:
        condition: service_started
      qdrant:
        condition: service_started
      minio:
        condition: service_started
      broker:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - sudar-network
    restart: unless-stopped
    command: ["python", "worker.py"]

  sudar-tools-mcp-server:
    build:
      context: ./services/sudar-tools-mcp-server
      args:
        - TAVILY_API_KEY=${TAVILY_API_KEY}
    container_name: sudar-tools-mcp-server
    environment:
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=sudar-content
      - MD_TO_PDF_URL=http://md-to-pdf:3000/convert
      - RAG_SERVICE_URL=http://rag-service:3001/rag
      - HOST=0.0.0.0
      - PORT=3002
    ports:
      - "3002:3002"
    depends_on:
      - minio
      - md-to-pdf
      - rag-service
    networks:
      - sudar-network
    restart: unless-stopped

  sudar-agent:
    build:
      context: ./services/sudar_agent
    container_name: sudar-agent
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://sudar_user:sudar_password@postgres:5432/sudar_db
      - MODEL_PROVIDER=${MODEL_PROVIDER}
      - GOOGLE_MODEL=${GOOGLE_MODEL}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL=${GROQ_MODEL}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - RAG_SERVICE_URL=http://rag-service:3001/rag
      - MCP_TOOLS_URL=http://sudar-tools-mcp-server:3002
      - MD_TO_PDF_URL=http://md-to-pdf:3000/convert
      - MONGODB_URL=mongodb://mongodb-server:27017
      - MONGODB_DATABASE=sudar_db
      - MONGODB_COLLECTION=chats
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_COLLECTION_SHORT_TERM=sudar_agent_short_term_memory
      - QDRANT_COLLECTION_LONG_TERM=sudar_agent_long_term_memory
      - OLLAMA_BASE_URL=http://ollama:11434
      - EMBEDDING_MODEL=embeddinggemma:300m
      - EMBEDDING_DIMENSION=768
      - HOST=0.0.0.0
      - PORT=3005
    expose:
      - "3005"
    depends_on:
      postgres:
        condition: service_started
      ollama:
        condition: service_started
      mongodb-server:
        condition: service_started
      qdrant:
        condition: service_started
      rag-service:
        condition: service_started
      sudar-tools-mcp-server:
        condition: service_started
    networks:
      - sudar-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  postgres-data:
  mongodb-data:
  minio-data:
  qdrant-data:
  manim-temp:
  manim-output:
  redis-data:
  ollama:
  docling-models:

networks:
  sudar-network:
    driver: bridge
